//
// Media Queries.
// 
@mixin mq($point, $IE9: false, $query1: min, $query2: width) {
  @if $IE9 == true {
    .lt-ie9 & {
        @content;
    }
    @media screen and (#{$query1}-#{$query2}: $point / $base-font-size +em) {
        @content;
    }
}

@else {
    @media screen and (#{$query1}-#{$query2}: $point / $base-font-size +em) {
        @content;
    }
  }
}



//
// Retina Images.
//
// USAGE:
// 
// div.logo {
//   background: url("logo.png") no-repeat;
//   @include image-2x("logo2x.png", 100px, 25px);
// }
//
// OUTPUT:
//
// div.logo {
//   background: url("logo.png") no-repeat;
// }
// @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6 / 2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
//   div.logo {
//     background-image: url("logo2x.png");
//     background-size: 100px 25px;
//   }
// }
//
// See http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/
//
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}



//
// Mixin to output REM based value with PX fallback for IE 8.
// See - http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
// 
@mixin px-rem($property, $values) {
  $px : ();
  $rem: ();
  
  @each $value in $values {
   
    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }
    
    @else { 
      $unit: unit($value);
      $val: parseInt($value);
      
      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 16 + rem));
      }
      
      @if $unit == "rem" {
        $px : append($px,  ($val * 16 + px));
        $rem: append($rem, $value);
      }
    }
  }
  
  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px; /* IE 8 */
    #{$property}: $rem; /* #{$px} / 16px */
  }
}



// Mixin to output RGBA with HEX fallback for IE 8.
// See - http://thesassway.com/intermediate/mixins-for-semi-transparent-colors
@mixin alpha-property($property, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);

  @if $solid-color == $color {
    #{$property}: $solid-color;
  } @else {
    #{$property}: $solid-color; /* IE 8 */
    #{$property}: $color;
  }
}